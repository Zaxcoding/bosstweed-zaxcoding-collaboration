{
Andy - 5/19/12
-made a bunch of changes to rotate functions

Piece.java- added a clearGrid() function (I'm not sure if this is necessary, i think we need to discuss how this movement is going to work with the square you are monitoring, as in how do you know if something is under it? And I'm not sure i understand the move down function)

IPiece.java - added this file so we have the I piece now, i added a system of rotation based on changing the grid based on the current grid, the current grid is known from a new position variable. all pieces should have the get and set position functions( i should probably put this in Piece.java

JPiece.java - this is the big file. this shows how the rotateL and rotateR really coexist together with the position variable. Really check this out and see if this makes sense and in your opinion if it will work or not. I'm going to now continue with this approach for the rest of the pieces. stop me on Facebook if you think this approach is not worth doing.


Zach - 5/17/12
Links- these should prove invaluable:
http://tetris.wikia.com/wiki/Tetris_Guideline
http://tetris.wikia.com/wiki/TGM_Rotation

Okay, a whole bunch of changes. Tough to recall them all.

MyPanel.java:
Updated to the one I use with Yahtzee now, so that in the constructor you can 
specify what gridLayout you want (and save a bunch of lines of code while 
doing the panel setup).

Tetris.java:
Added functionality to the three buttons.
	- New game just spawns a new Tetris()
	- Pause calls pause(), which toggles the boolean 'paused' and sends the 
	  current value to the terminal.
	- Quit calls System.exit(0)
	
Piece.java:
Created this class. It's just an idea and has lots of room for changes and 
improvements. I want it to be abstract so that a lot of the same methods 
(like moving right, left, returning instance variables) can be called through 
a common interface.
The general idea is to keep track of the grid size (4 for line and square, 3 
for everything else), the lower x,y position, and then calculate everything 
else based on that.
The rest is very self explanatory and ready to be changed.

SquarePiece.java:
Definitely the easiest piece since it can't rotate.
Spawn has my idea of how that will work, and a little picture above to 
help visualize it.

GameBoard.java:
Not really sure what this should end up being, so I just threw some stuff 
in for now.
}